#!/usr/bin/env python3
"""
Sistema de Pruebas para RPA PIX
Verifica que todos los componentes funcionen correctamente antes de la ejecuci√≥n
"""

import sys
import time
from pathlib import Path
from datetime import datetime

# Configurar path para importaciones
sys.path.append(str(Path(__file__).parent))

from config.settings import validate_configuration, print_configuration_status
from utils.logger import setup_logger


class RPATestSuite:
    """Suite de pruebas para el sistema RPA"""
    
    def __init__(self):
        self.logger = setup_logger("RPATest")
        self.test_results = {}
        self.start_time = datetime.now()
    
    def run_all_tests(self) -> bool:
        """Ejecuta todas las pruebas del sistema"""
        print("\n" + "="*60)
        print("üß™ INICIANDO SUITE DE PRUEBAS PIX RPA")
        print("="*60)
        
        tests = [
            ("Configuraci√≥n del Sistema", self.test_configuration),
            ("Estructura de Directorios", self.test_directories),
            ("Importaci√≥n de M√≥dulos", self.test_module_imports),
            ("Conectividad API", self.test_api_connectivity),
            ("Base de Datos", self.test_database),
            ("Generaci√≥n Excel", self.test_excel_generation),
            ("OneDrive (Opcional)", self.test_onedrive),
            ("Automatizaci√≥n Web (Opcional)", self.test_web_automation)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_function in tests:
            print(f"\nüîç Ejecutando: {test_name}")
            try:
                result = test_function()
                self.test_results[test_name] = result
                
                if result:
                    print(f"   ‚úÖ {test_name}: PAS√ì")
                    passed_tests += 1
                else:
                    print(f"   ‚ùå {test_name}: FALL√ì")
                    
            except Exception as e:
                print(f"   üí• {test_name}: ERROR - {str(e)}")
                self.test_results[test_name] = False
        
        # Resumen final
        self._print_final_results(passed_tests, total_tests)
        
        # Determinar si el sistema est√° listo
        critical_tests = [
            "Configuraci√≥n del Sistema",
            "Estructura de Directorios", 
            "Importaci√≥n de M√≥dulos",
            "Conectividad API",
            "Base de Datos"
        ]
        
        critical_passed = all(self.test_results.get(test, False) for test in critical_tests)
        
        return critical_passed
    
    def test_configuration(self) -> bool:
        """Prueba la configuraci√≥n del sistema"""
        try:
            config_status = validate_configuration()
            
            # Verificar componentes cr√≠ticos
            critical_components = ['api', 'database', 'directories']
            critical_ok = all(config_status.get(comp, False) for comp in critical_components)
            
            if critical_ok:
                print("   üìã Configuraci√≥n cr√≠tica: OK")
                
                # Verificar componentes opcionales
                optional_ok = []
                if config_status.get('onedrive', False):
                    print("   ‚òÅÔ∏è  OneDrive: Configurado")
                    optional_ok.append(True)
                else:
                    print("   ‚ö†Ô∏è  OneDrive: No configurado (opcional)")
                
                if config_status.get('web_automation', False):
                    print("   üåê Formulario Web: Configurado")
                    optional_ok.append(True)
                else:
                    print("   ‚ö†Ô∏è  Formulario Web: No configurado (opcional)")
                
                return True
            else:
                print("   ‚ùå Configuraci√≥n cr√≠tica incompleta")
                return False
                
        except Exception as e:
            print(f"   üí• Error en configuraci√≥n: {e}")
            return False
    
    def test_directories(self) -> bool:
        """Prueba la estructura de directorios"""
        try:
            from config.settings import DATA_DIR, LOGS_DIR, REPORTS_DIR, EVIDENCES_DIR
            
            directories = {
                'data': DATA_DIR,
                'logs': LOGS_DIR,
                'reports': REPORTS_DIR,
                'evidences': EVIDENCES_DIR
            }
            
            all_exist = True
            for name, path in directories.items():
                if path.exists():
                    print(f"   üìÅ {name}: {path}")
                else:
                    print(f"   ‚ùå {name}: {path} - NO EXISTE")
                    all_exist = False
            
            return all_exist
            
        except Exception as e:
            print(f"   üí• Error verificando directorios: {e}")
            return False
    
    def test_module_imports(self) -> bool:
        """Prueba que todos los m√≥dulos se importen correctamente"""
        modules_to_test = [
            ('config.settings', 'Configuraciones'),
            ('modules.api_consumer', 'Consumidor API'),
            ('modules.database_manager', 'Gestor BD'),
            ('modules.excel_generator', 'Generador Excel'),
            ('modules.onedrive_client', 'Cliente OneDrive'),
            ('modules.web_automation', 'Automatizaci√≥n Web'),
            ('utils.logger', 'Sistema Logging')
        ]
        
        failed_imports = []
        
        for module_name, description in modules_to_test:
            try:
                __import__(module_name)
                print(f"   ‚úÖ {description}: Importado")
            except ImportError as e:
                print(f"   ‚ùå {description}: {e}")
                failed_imports.append(module_name)
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {description}: {e}")
        
        return len(failed_imports) == 0
    
    def test_api_connectivity(self) -> bool:
        """Prueba conectividad con Fake Store API"""
        try:
            from modules.api_consumer import FakeStoreAPIConsumer
            
            with FakeStoreAPIConsumer() as api_client:
                if api_client.validate_api_connection():
                    print("   üåê Fake Store API: Accesible")
                    
                    # Obtener una peque√±a muestra
                    try:
                        categories = api_client.get_categories()
                        if categories:
                            print(f"   üìä Categor√≠as disponibles: {len(categories)}")
                            print(f"      {', '.join(categories[:3])}{'...' if len(categories) > 3 else ''}")
                        return True
                    except:
                        print("   ‚ö†Ô∏è  API accesible pero sin datos de categor√≠as")
                        return True
                else:
                    print("   ‚ùå Fake Store API: No accesible")
                    return False
                    
        except Exception as e:
            print(f"   üí• Error probando API: {e}")
            return False
    
    def test_database(self) -> bool:
        """Prueba operaciones b√°sicas de base de datos"""
        try:
            from modules.database_manager import DatabaseManager
            
            db = DatabaseManager()
            print("   üíæ Base de datos: Inicializada")
            
            # Obtener estad√≠sticas actuales
            stats = db.get_statistics()
            if stats:
                print(f"   üìà Productos existentes: {stats.get('total_products', 0)}")
                print(f"   üè∑Ô∏è  Categor√≠as: {len(stats.get('category_stats', []))}")
                return True
            else:
                print("   ‚ö†Ô∏è  BD inicializada pero sin datos")
                return True
                
        except Exception as e:
            print(f"   üí• Error en base de datos: {e}")
            return False
    
    def test_excel_generation(self) -> bool:
        """Prueba la generaci√≥n de archivos Excel"""
        try:
            from modules.excel_generator import ExcelReportGenerator
            
            # Usar datos de prueba m√≠nimos
            test_products = [{
                'id': 999,
                'title': 'Producto Test',
                'price': 19.99,
                'category': 'test',
                'description': 'Producto de prueba',
                'fecha_insercion': datetime.now()
            }]
            
            test_stats = {
                'total_products': 1,
                'avg_price': 19.99,
                'category_stats': [{
                    'category': 'test',
                    'count': 1,
                    'avg_price': 19.99,
                    'min_price': 19.99,
                    'max_price': 19.99
                }]
            }
            
            generator = ExcelReportGenerator()
            excel_path = generator.generate_report(test_products, test_stats)
            
            if Path(excel_path).exists():
                print(f"   üìä Excel generado: {Path(excel_path).name}")
                # Limpiar archivo de prueba
                Path(excel_path).unlink()
                return True
            else:
                print("   ‚ùå Excel no se gener√≥ correctamente")
                return False
                
        except Exception as e:
            print(f"   üí• Error generando Excel: {e}")
            return False
    
    def test_onedrive(self) -> bool:
        """Prueba configuraci√≥n OneDrive (opcional)"""
        try:
            from modules.onedrive_client import OneDriveClient
            from config.settings import OneDriveSettings
            
            if not OneDriveSettings.is_configured():
                print("   ‚ö†Ô∏è  OneDrive no configurado - OPCIONAL")
                return True  # No es error cr√≠tico
            
            client = OneDriveClient()
            if client.authenticate():
                print("   ‚òÅÔ∏è  OneDrive: Autenticaci√≥n exitosa")
                return True
            else:
                print("   ‚ùå OneDrive: Error de autenticaci√≥n")
                return False
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  OneDrive error: {e} - OPCIONAL")
            return True  # No cr√≠tico
    
    def test_web_automation(self) -> bool:
        """Prueba configuraci√≥n de automatizaci√≥n web (opcional)"""
        try:
            from modules.web_automation import WebFormAutomator, test_web_automation
            from config.settings import WebAutomationSettings
            
            if not WebAutomationSettings.is_configured():
                print("   ‚ö†Ô∏è  Formulario web no configurado - OPCIONAL")
                return True  # No es error cr√≠tico
            
            # Ejecutar test b√°sico de WebDriver
            if test_web_automation():
                print("   üåê WebDriver: Configuraci√≥n OK")
                return True
            else:
                print("   ‚ùå WebDriver: Error de configuraci√≥n")
                return False
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Web automation error: {e} - OPCIONAL")
            return True  # No cr√≠tico
    
    def _print_final_results(self, passed: int, total: int):
        """Imprime resumen final de las pruebas"""
        end_time = datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        print("\n" + "="*60)
        print("üìã RESUMEN DE PRUEBAS")
        print("="*60)
        print(f"‚è±Ô∏è  Duraci√≥n: {duration:.2f} segundos")
        print(f"‚úÖ Pruebas pasadas: {passed}/{total}")
        print(f"‚ùå Pruebas fallidas: {total - passed}/{total}")
        print(f"üìä Tasa de √©xito: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("\nüéâ TODAS LAS PRUEBAS PASARON - Sistema listo para ejecuci√≥n")
        elif passed >= 5:  # Pruebas cr√≠ticas
            print("\n‚úÖ PRUEBAS CR√çTICAS PASARON - Sistema funcional")
            print("‚ö†Ô∏è  Algunas funciones opcionales no est√°n configuradas")
        else:
            print("\n‚ùå PRUEBAS CR√çTICAS FALLARON - Revisar configuraci√≥n")
        
        print("="*60)


def main():
    """Funci√≥n principal de testing"""
    try:
        # Banner inicial
        print("PIX RPA - SISTEMA DE PRUEBAS")
        print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Mostrar configuraci√≥n actual
        print("\nüìã CONFIGURACI√ìN ACTUAL:")
        print_configuration_status()
        
        # Ejecutar pruebas
        test_suite = RPATestSuite()
        system_ready = test_suite.run_all_tests()
        
        # Recommendations
        print("\nüöÄ PR√ìXIMOS PASOS:")
        
        if system_ready:
            print("1. ‚úÖ Sistema listo - ejecutar: python main_pix_rpa.py")
            print("2. üìä Para solo pasos cr√≠ticos: python main_pix_rpa.py --steps 1,2,3")
            
            # Configuraciones opcionales
            from config.settings import OneDriveSettings, WebAutomationSettings
            
            if not OneDriveSettings.is_configured():
                print("3. ‚òÅÔ∏è  (Opcional) Configurar OneDrive en .env para paso 4")
            
            if not WebAutomationSettings.is_configured():
                print("4. üåê (Opcional) Crear formulario web y configurar en .env para paso 5")
                
            return 0
        else:
            print("1. ‚ùå Revisar errores arriba")
            print("2. üìñ Consultar README.md para instrucciones")
            print("3. üîß Instalar dependencias: pip install -r requirements.txt")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Pruebas interrumpidas")
        return 2
    except Exception as e:
        print(f"\nüí• Error cr√≠tico en pruebas: {e}")
        return 3


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
